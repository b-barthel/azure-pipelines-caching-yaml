# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  PYTHONPATH: $(Pipeline.Workspace)/.cache/pip
  CACHE_KEY: pip | $(Agent.OS) | $(Build.BuildId) | Pipfile.lock
  CACHE_FALLBACK_KEY: pip | $(Agent.OS) | $(Build.BuildId)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.5
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
      
- task: CacheBeta@1
  inputs:
    key: $(CACHE_KEY)
    restoreKeys: $(CACHE_FALLBACK_KEYS)
    path: $(PYTHONPATH)
    cacheHitVar: CACHE_RESTORED
  displayName: Cache packages
  
- script: |
    pip install --target=$(PYTHONPATH) -r requirements.txt
  displayName: 'Install prerequisites'
  condition: ne(variables.CACHE_RESTORED, 'true')

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  condition: succeededOrFailed()
  displayName: 'Run tests'
