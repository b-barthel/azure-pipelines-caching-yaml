# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

strategy:
  matrix:
    linux 16 Uncached:    
      VM_IMAGE: ubuntu-16.04
      ENABLE_CACHE: 0
    linux 18 Uncached:
      VM_IMAGE: ubuntu-18.04
      ENABLE_CACHE: 0
    windows 2017 Uncached:
      VM_IMAGE: vs2017-win2016
      ENABLE_CACHE: 0
    linux 16:    
      VM_IMAGE: ubuntu-16.04
    linux 18:
      VM_IMAGE: ubuntu-18.04
    windows 2017:
      VM_IMAGE: vs2017-win2016
pool:
  vmImage: $(VM_IMAGE)

variables:
  skipComponentGovernanceDetection: true
  # # cache the npm cache
  npm_config_cache: $(Pipeline.Workspace)/.npm
  dotnpm_CACHE_KEY: '$(dotnpm_CACHE_FALLBACK_KEY) | node.js-with-npm/package-lock.json'
  dotnpm_CACHE_FALLBACK_KEY: '".npm" | "$(VM_IMAGE)"'
  # cache the node_modules folder
  node_version_file: $(Pipeline.Workspace)/node.version.txt
  node_modules_CACHE_KEY: '"node_modules" | "$(VM_IMAGE)" | $(node_version_file) | node.js-with-npm/package.json | node.js-with-npm/package-lock.json'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'
- script: node --version > $(node_version_file)

# only look for the exact match for node_modules
- task: Cache@2
  inputs:
    key: $(node_modules_CACHE_KEY)
    path: 'node.js-with-npm/node_modules'
    cacheHitVar: NODE_MODULES_RESTORED
  displayName: 'Cache node_modules'
  condition: ne(variables.ENABLE_CACHE, '0')
  
# # if we didn't get a good match for node_modules, see if we have a recent copy of the .npm cache folder
- task: Cache@2
  inputs:
    key: $(dotnpm_CACHE_KEY)
    restoreKeys: $(dotnpm_CACHE_FALLBACK_KEY)
    path: $(npm_config_cache)
  displayName: 'Cache .npm'
  condition: ne(variables.NODE_MODULES_RESTORED, 'true')

- script: |
    cd node.js-with-npm
    npm ci
  displayName: 'npm ci'
  condition: ne(variables.NODE_MODULES_RESTORED, 'true')
